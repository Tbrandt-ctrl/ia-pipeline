SUMMARY A professional Microsoft Certified full stack .NET Developer with 8 plus years’ experience of web application development based on N - tier/3-tier architecture using software development life cycle phases from analysis, design, development to deployment. Worked on web projects in financial domain, Healthcare marketing, and incident management using SDLC Agile scrum and waterfall methodologies. Provide services such as new application development, enhancement of existing application, troubleshooting, automation testing, bug fixing in staging and production environment. Hands-on experience in teh construction and design of web projects using Object Oriented Programming System (OOPS) which include Encapsulation, Polymorphism, Inheritance, and Abstraction, as well as design patterns like MVC, Factory, and Singleton. Hands-on experience with web technologies such as HTML5, CSS3, JavaScript, jQuery, AJAX, and Bootstrap for user-friendly and interactive web page design. Experienced in ASP.NET AJAX for asynchronous request and response between Client and Server. Experienced in creating WCF Services, Web Services for JSON-based service-oriented applications over HTTP, TCP, RESTful and SOAP request-response messaging protocol across various operating system environments. Excellent understanding of Data Object Models like LINQ (Language Integrated Query) to write C# LINQ queries for modification and/or retrieval of data and EF (Entity Framework) to design ADO.NET Entity Framework Data Models. Experienced in managing a database with primarily T-SQL Complex Stored Procedure, Views, Triggers, Indexing, and Functions. Hands-on experience in reporting services using SQL Server Reporting Services (SSRS). Experienced in Change Management System such as Git repository, Team Foundation Server (TFS), Tortoise SVN and Visual SourceSafe (VSS), for issue tracking, explicit check-out and check-in, and integrated source control. Hands-on experience of enhancement of ASP.NET MVC, WCF services, and ASP.NET Web API projects. Troubleshooting, fixing production issues, and providing support of existing web applications in UAT, staging and production environments. TECHNICAL SKILLS Operating Systems: Windows 10, Windows 8, Windows 7, Windows Vista, Windows XP, Ubuntu, Mac OS X .Net Technologies: .Net Framework 4.5/4.0/3.5/3.0 , ASP.NET, C#.NET, WCF, Web Services, LINQ, EF 6.0/5.0, ASP.NET MVC 5.0/4.0, ASP.NET WEB API 2.0, DotNetNuke 6.0 Programming Languages: C, C++, C#, Python Web Technologies: HTML5, CSS3, JavaScript, AJAX, JQuery, JSON, XML, Bootstrap, AngularJS, C# RAZOR, Sencha Extjs RDBMS: Microsoft SQL Server 2014/2012/2008/2005 Reporting Tool: SSRS (SQL Server Reporting Services) Protocols: HTTP, FTP, SOAP, SMTP, TCP/IP, RESTful Version Control: Git Repository, VSS 6.0 (Visual SourceSafe), TFS 2015/2012 (Team Foundation Server), Tortoise SVN Development Tools: Microsoft Visual Studio 2017/2015/2012/2010/2008/2005 , MS Office 2007, Microsoft Visio 2010, Microsoft SQL Server Data Tools PROFESSIONAL EXPERIENCE Confidential, Mahwah, NJ Sr.NET Developer Responsibilities: Created AMEX vCard web pages in ASP.NET MVC 5.0 in MER360 admin portal used by program managers. Developed a multitenant library interface of dlls and asp.net web api calls for AMEX endpoints consumers. Used entity framework for entity set and repositories and data context file of schema tables, stored-procedures, and views. Implemented ASP.NET Web API methods to consume SENCHA Ajax calls request on server. Worked on VCARD schema, T-SQL stored-procedures and views to store and retrieve meeting’s AMEX vCard info with card image, settlement transactions history, vCard authorization history etc. Developed controllers, views, store, model, and view-model using SENCHA extjs framework for a meeting’s F&B expenses distribution against vCard total transaction cost. Used GITHUB repository to solve merge conflicts, rebase teh master branch from current local branch changes. Environment: .NET framework 4.5, ASP.NET MVC 5.0, ASP.NET Web API 2.0, C# 4.0.0, Entity Framework 6.0, Postman 4.10.0, GitHub v3.0, GitHub Desktop, Git Shell CLI, Visual Studio 2017, MS SQL Server 2014, Sencha ExtJS framework 6.0. Confidential Responsibilities: Worked on tasks assigned by project manager for enhancement of existing WCF services based on client requirements. Developed business layer in asp.net VB to store and retrieve app data in and from teh Takeda database. Used Postman to test teh WCF service calls for SMI Takeda eSign app. Used GITHUB repository for version control of local branches with master and develop branches for pull request of committed code to develop branch for merging local files to remote server. Changed existing T-SQL stored-procedures, tables as per teh new requirements of client. Used SQL Profiler for performance tuning of complex stored procedures and tracing of log information. Upgraded long running and time-consuming service call of huge attendee records for fast execution. Committed schema, stored-procedure, and data script files modification on eSign repository GIT branch. Troubleshooting and debugging of IOS app service calls to update attendees’ questions and answers and personal information. Environment: Visual Studio 2013, MS SQL Server 2014, ASP.NET 4.5.2 framework, VB.NET 4.0, Postman 4.10.0, GitHub v3.0 Confidential Responsibilities: Analysis of vConnect requirements and understanding of business definitions of event speakers virtual training and pre-scheduled meetings. Created multitenant portal for multiple clients for different operations like creating pre-scheduled meetings in bulk, creating meetings content, adding new speakers with speakers’ pictures and bio. Implemented vConnect admin pages using model, view and controller architecture pattern by ASP.NET MVC 5.0 framework and C#. Created presentation layer using C# razor code view with teh use of viewmodel classes for data binding between view and model. Designed HTML pages using HTML helpers and bootstrap with jQuery client-side scripting for validation and HTTP GET and POST ajax calls for data transportation in JSON between client and server. Developed common data abstract layer for ASP.NET web API calls and ASP.NET MVC 5.0 projects for storing and retrieving records to and from teh database. Used Swagger Swashbuckler 5.5.3 libraries for Swagger web API calls interface for testing of Web API calls implemented using ASP.NET Web 2.0 framework and restful protocol. Developed Web.Test and WebAPI.Test projects using moq unit testing framework for regression testing with screenshots while automated testing is performed. Used ninject 3.2.0 nuget package for dependency injection for loosely coupled code. Used interface for procedure calls and callback functions in business and data abstract layers. Used GitHub repository for different functionalities of admin portal’s local branches and merged it into master and develop branch and push committed code from local to remote branch. Responsible for checking stored procedure and created data type table for bulk insert of pre-scheduled meetings from user defined DataTable to data type table variable. Used Log4Net libraries for maintaining log throughout teh admin portal web pages and each API calls while performing insert, update and delete operations. Used SQL Profiler for performance tuning of complex stored procedures and tracing of log information. Environment: Visual Studio 2013, MS SQL Server 2014, ASP.NET MVC 5.0, ASP.NET 4.5.2 framework, ASP.NET Web API 2.0 with OAuth 2.0, Postman 4.10.0, Swagger 2.0, Moq 4.5.30, GitHub v3.0, C#.NET 5.0, Apache Log4NET 2.0.8 Confidential, New York Sr.Net Developer Responsibilities: Analysed requirements with software architect to understand teh flow of teh entire system in a very organized way to fulfill client’s expectations. AGILE Methodology (SCRUM) to create sprint stories until successful implementation of client’s software specifications. Designed swim lane diagrams and flowcharts for equities order instructions and transmittal modules. Implemented ASP.NET WEB API 2.0 interface using RESTful protocol in SOA (Service Oriented Architecture) to process teh partners’ financial data. Created ASP.NET MVC 5.0 project templates with CSS3 and Bootstrap for web controls skins and dynamic resolution of teh modules like portfolio page with statistics data visualization, equity trading and transaction of online equity orders. Applied AngularJS client-side framework code using MVC architectural pattern to HTML5 documents for teh dynamic view as well as teh asynchronous and fast response from teh server to retrieve data in teh form of JSON objects and display these objects through HTML5. Wrote stored procedures, functions, triggers, views, and other T-SQL queries for reports such as payment calculation, transaction records history and capital market updates. Performed ETL (Extract Transform and Load) with SSIS (SQL Server Integration Services) of flat file data from data source, transform raw data into a proper format for querying and analysis, and finally loaded into targeted database. Scheduled jobs in SQL Server to send notifications to customers regarding their equity transactions approval via email and SMS. Developed web reports of ordered equities and customer investments using T-SQL queries and views with SQL joins to collect data from more TEMPthan one table and indexing for teh better search result. Used SQL Profiler for performance tuning of complex stored procedures and tracing of log information. Worked on SSRS (SQL Server Report Services) for complex document printing and reporting services. Used jQuery and AJAX for responsive user interface type as autocomplete search field, asynchronous panels for quick request and response between client and server. Experienced in object-relational mapping using Entity Framework 6.0 “code-first” to an existing database to insert tables with relationships from domain specific objects of class created in C# programming language as well as used LINQ queries for storing and retrieving data. Used page and data caching concepts to increase teh throughput of teh ASP.NET MVC pages. Performed unit testing using NUNIT test framework to test multiple modules. Used TFS (Team Foundation Server) for source control to control teh changes made in dis application over time. Environment: .Net Framework 4.5, ASP.NET MVC 5.0, ASP.NET WEB API 2 using RESTful, C#.NET, EF 6.0, Microsoft Visual Studio 2015, Microsoft SQL Server Management Studio 2012, SQL Profiler, TFS (Team Foundation Server), Git repository, NUNIT testing framework, Microsoft Visio 2010, Microsoft SQL Server Data Tools, IIS 7.0. Confidential, Atlanta, Georgia Sr.Net Developer Responsibilities: Analysed teh application requirements and overall structure of a project from Software Requirements Specifications. Used ASP.NET MVC 4.0 to provide an interface for prioritized incidents and to broadcast teh same according to teh assessment of teh business services. In details, monitoring teh cars to find out faults or critical issues. Created multiple/partial views in ASP.NET MVC 4.0. Worked on layouts to finalized design of web pages according to teh client’s expectations and incorporated them into ASP.NET MVC 4.0 application. Designed flowcharts and decision making diagrams of major incidents during teh business operations and how to eliminate teh cause of incidents. Used ViewBag with dynamic properties to pass tiny bit of data from teh controller to teh view for different components of teh web pages. Used ASP.NET MVC 4.0 bundling and minification techniques to improve teh performance of teh website by configuring a bundle in /APP START folder for scripts used in dis projects. Implemented separate custom routes for machine categories, car parts and added them to ASP.NET MVC route collection through routetables. Worked on ASP.NET MVC 4.0 validation and data annotations attributes for models validation. Created rich, user-friendly and responsive UI of teh web pages in jQuery/JavaScript with custom controls such as teh automatic response to critical incidents which need to resolve as soon as possible. Used Bootstrap for responsive web pages along with HTML5 and CSS3 for standardization of controls and look throughout teh pages of an application. Used AngularJS with web methods to retrieve data in JSON format and displayed through various dynamic grid controls. Implemented business logic in C#.NET after work on stories of tasks according to teh requirements of teh client. Performed multiple views using C#RAZOR engine to execute code on server side and respond back to teh client browser in HTML code format. Developed WCF services with HTTP protocol for accessing teh data and business logic layer for separate modules of different range of assembled cars. Designed SSIS ETL (Extract Transform and Load) packages to load operations data from different sources like EXCEL and FLAT files into SQL database. Implemented several tasks like data conversion, look up, merge join, and conditional split on available data using SSIS. Created a model in teh Entity Framework 5.0 designer for existing database to automatically create classes with domain specific objects from relational objects. Used programming logic to build required stored procedures to pop-up all data as well as triggers to maintain log information of actions dat performed within teh database. Used NUNIT framework for unit testing of each module. Used Tortoise SVN for source control with different versions of source code made in dis application over time. Environment: .Net Framework 4.0, ASP.NET MVC 4.0, C#.NET, EF 5.0, Microsoft Visual Studio 2012, Microsoft SQL Server Management Studio 2008, WCF Services with XML, Microsoft Visio 2010, Microsoft SQL Server Data Tools, IIS 7.0, Tortoise SVN. Confidential .Net Developer Responsibilities: Email conversation with a client for project requirements and follow-up after completion of modules. Understanding of “symptoms of coffee latte”, a web application developed in Microsoft DotNetNuke 6.0 to know teh actual requirements like “how to apply coffee theme to dis web application?”, “Development of mobile application data using WCF services and JSON technologies.” Created “symptoms of coffee latte” web application in ASP.NET MVC 4.0 from DotNetNuke 6.0 due to teh client’s requirements. Implemented bubble sort logic for symptoms values in ascending order. Developed a dynamic function to convert data in JSON format. Designed a new coffee theme for “symptoms of coffee latte” website for a better look and feel with teh use of HTML, CSS, jQuery, and Mozilla Firefox firebug extension. Used HTML control tags and attributes with dynamic C# razor code. Applied coffee theme to ASP.NET MVC 4.0 web application pages for default skin and controls with teh interactive user-friendly design. Created SSIS (SQL Server Integration Services) package to extract coffee symptoms from data file dat represented data in specific format, transform dis data, and load it into SQL Server database. Understanding of teh SQL database contains teh values of symptoms of coffee latte to check teh threshold point of symptoms as well as recommendation values for abnormal symptoms and mapped relational objects with a model of domain specific objects using Entity Framework 5.0 to perform operations like updated symptoms values, added new values, and deletion of unwanted values. Written WCF service to provide services of coffee latte symptoms data in JSON format using SOAP (Simple Object Access Protocol) messaging protocol. Used values of symptoms in ascending and descending order and also checked teh recommendation values from database file match to symptoms accordingly as per teh client’s requirements. Direct interaction with android application developer to call web methods in JSON format to pass teh data from database file to teh android app using SOAP messaging protocol. Used Tortoise SVN for source control with different versions of source code made in dis application over time. Environment: .Net Framework 4.0, ASP.NET MVC 4.0, C#.NET, EF 5.0, Microsoft DotNetNuke 6.0, WCF Services with JSON, Microsoft Visual Studio 2010 with SQL Server Data Tools, Tortoise SVN. Confidential Jr.NET Developer Responsibilities: Associated in a meeting with teh client to understand overall flow and requirements. A thorough analysis of software specifications to find out what would be teh actual purpose from client’s perspective as well as how to design an application for teh error-free and efficient outcome. Designed structure and content of teh website in three different categories Masters, Transactions, and Reports. Created database from inception after designed an E-R diagram to find teh relationship between data objects. Designed MasterPage in ASP.NET for unique layout for teh website. Used web UI such as HTML, CSS to apply theme on a web application. Developed code to upload excel file directly into teh database using File-Upload control. Considered large data size of excel file and used bulk insert to upload data directly into teh database from excel sheet instead of cell by cell. Implemented T-SQL queries to generate reports data from view for a specific date, month, and year. Developed JavaScript validation functions for email, password, range, currency, and mandatory fields and called them from code behind teh model for server controls. Used different types of joins, views, and indexes for query optimization, efficiency improvement and redundancy elimination. Performed Group Rights Master and User Access Master to provide access rights to members of teh specific group like Branch Manager, Marketing Person, etc. Used AJAX and JavaScript for asynchronous communication between client and server without page postback. Worked on reports like customer collection history, plan vs actual invoice recovery, and aging details. Unit testing after completion of modules. Stress testing, performance testing, and security testing once teh product is ready for deployment to determine teh stability. Deployed teh application single handed to check teh performance on client application server before final deployment as well as first installed required software after a direct conversation with network manager. Tested application to confirm. Environment: .Net Framework 3.5, C#.NET, Microsoft Visual Studio 2008, Microsoft SQL Management Studio 2008, IIS Confidential  Software Programmer Responsibilities: Involved in Software Requirement Specifications with teh client and other teammates. Analyzed teh hierarchy of positions of employees and their respective access rights. Used Waterfall methodology for teh sequential progress of an application such as Software Analysis, Software Design, Software Coding, Software Testing and Software Deployment. Worked on stored procedures, functions, triggers, views, and indexing to process data in a way to get maximum productivity with less execution time. Used joins and subqueries according to teh needs to get teh data from more TEMPthan one table as well as other Transact-SQL keywords group by, having, order by, distinct, union, union all, ASC and DESC for sorting, and aggregate functions like count, average, max, min, and sum. Designed and Developed web forms, MasterPage according to client requirements for teh user-friendly and secure website. Implemented code in JavaScript to design dynamic table to display multiple columns on web pages with auto scrollbars. Developed JavaScript validation functions for email, password, range, currency, and mandatory fields and called them from code behind teh model to server controls. Used JavaScript and AJAX technologies to implement custom user-defined controls for rich and interactive layout. Written a query to show goals at each level from top to ground. For instance, teh manager can view a hierarchical report of his/her team members’ achievements, as well as other employees of a company, can check their goal progress. Used testing strategies like unit testing after completion of each module, stress testing, and performance testing. Applied an introductory video created in Adobe Flash of how to achieve goals through an application so dat employees can has knowledge of overall concepts. Designed a user manual as per client’s requirements to instruct employees about how to use “goal setting tools” website. Environment: .Net Framework 3.5, C#.NET, Microsoft Visual Studio 2008, Microsoft SQL Management Studio 2005, Microsoft Visual SourceSafe 2005, Adobe CS 6.0. Confidential Jr. Software Programmer Responsibilities: Discussed project details on different topics like purpose, scope, objective, design, and technologies with other team members. Studied on feasibility such as technical feasibility and operational feasibility to find out teh questions like “Is dis current Computer’s configuration adequate for usage?”, “Is teh selected technique sufficient for future enhancements?” Worked on project planning for teh requirements provided by teh client mainly focus on project development approach and justification, plan, milestones and deliverables, and group dependencies. Performed analysis of system requirements in terms hardware and software, implementation goals, software requirement specifications, features of teh system, and object model of teh system. Developed use case diagrams, entity relationship diagram, class diagram, and sequence diagram in software design phase. Personalized dynamically updated homepage containing various favorite widgets of teh user. Used .Net Framework 3.0, C# 3.0, AJAX and LINQ for rich ajax-powered start page for asynchronous page execution. Implemented functionalities included drag and drop, edit, and delete for widgets for a user-friendly interface. Widgets include to-do lists, address books, contact lists, RSS feeds, clocks, calendars, playlists, weather reports and much more. Designed tabs in web portal 2.0 page for users to add more widgets on multiple pages. Used server-side validation controls for user’s login page. Analysed and checked system representations such as teh requirements document, design diagrams, and program source code. Worked on testing strategies included unit testing for individual components, integration testing at each level of integration, and finally fully integrated system tested by system testing. Created user manual with screen shots which will guide teh new users to help and navigate easily within teh system. Environment: ASP.NET Framework 3.0, C#.NET, Microsoft Visual Studio 2005, Microsoft SQL Server Management Studio 2005, Microsoft Office Access 2007. 